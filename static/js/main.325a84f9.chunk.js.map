{"version":3,"sources":["Component/index.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","count","props","time","start","autostart","width","Start","setState","onTimeStart","DecrementTime","step","Pause","onTimePause","changeWidth","this","setInterval","onTick","onTimeEnd","onClick","className","style","Component","App","console","log","timeLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yTAGqBA,G,wNAEjBC,MAAQ,CACJC,MAAO,EAAKC,MAAMC,KAClBC,OAAO,EACPC,UAAW,EAAKH,MAAMG,UACtBC,MAAO,K,EAoCXC,MAAQ,WACJ,EAAKC,SAAS,CACVJ,OAAO,IAEX,EAAKF,MAAMO,e,EAGfC,cAAgB,WACZ,EAAKF,SAAS,CAEVP,MAAO,EAAKD,MAAMC,MAAQ,EAAKC,MAAMS,Q,EAI7CC,MAAQ,WACJ,EAAKJ,SAAS,CACVJ,OAAO,IAEX,EAAKF,MAAMW,e,EAGfC,YAAc,WACV,EAAKN,SAAS,CACVF,MAAO,EAAKN,MAAMM,MAAQ,EAAKJ,MAAMS,MAAM,IAAI,EAAKT,MAAMC,S,kEAxD7C,IAAD,QAEU,IAAvBY,KAAKf,MAAMK,YACVU,KAAKR,QACLS,aAAY,YACc,IAAnB,EAAKhB,MAAMI,QACP,EAAKJ,MAAMC,OAAO,GACjB,EAAKS,gBACL,EAAKI,cACF,EAAKd,MAAMC,OAAO,GACjB,EAAKC,MAAMe,OAAO,EAAKjB,MAAMC,QAGjC,EAAKW,SAGS,IAAnB,EAAKZ,MAAMC,OACV,EAAKC,MAAMgB,YAEZ,EAAKlB,MAAMC,MAAM,IAChB,EAAKM,QACL,EAAKC,SAAS,CACVP,MAAO,EAAKC,MAAMC,OAEtB,EAAKK,SAAS,CACVF,MAAO,SAGA,IAAhBS,KAAKb,MAAMS,S,+BAkClB,OACI,6BACI,4BACI,6BAAMI,KAAKf,MAAMC,MAAjB,0BAEJ,6BACI,4BAAQkB,QAASJ,KAAKR,OAAtB,SACA,4BAAQY,QAASJ,KAAKH,OAAtB,UAEJ,6BACA,yBAAKQ,UAAU,QAAQC,MAAO,CAAEf,MAAOS,KAAKf,MAAMM,MAAQ,MAA1D,U,GAjFmBgB,cCsBpBC,E,uKAhBX,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,CACAjB,KAAM,GACNQ,KAAM,EACNN,WAAW,EACXY,OAAQ,SAACd,GAAD,OAAUqB,QAAQC,IAAI,gGAAuBtB,IACrDe,UAAW,kBAAMM,QAAQC,IAAI,mEAC7BhB,YAAa,SAACiB,GAAD,OAAcF,QAAQC,IAAI,qFACvCZ,YAAa,SAACa,GAAD,OAAcF,QAAQC,IAAI,6F,GAZ7BH,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.325a84f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './timer.css'\r\n\r\nexport default class Timer extends Component{\r\n    \r\n    state = {\r\n        count: this.props.time,\r\n        start: true,\r\n        autostart: this.props.autostart,\r\n        width: 100,\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        if(this.state.autostart===true){\r\n            this.Start();\r\n            setInterval(() => {\r\n                if(this.state.start===true){\r\n                    if(this.state.count>=0){\r\n                        this.DecrementTime();\r\n                        this.changeWidth();\r\n                        if(this.state.count>=0){\r\n                            this.props.onTick(this.state.count);\r\n                        }\r\n                    } else {\r\n                        this.Pause();\r\n                    }\r\n                } \r\n                if(this.state.count===0){\r\n                    this.props.onTimeEnd();\r\n                } \r\n                if(this.state.count<0){\r\n                    this.Start();\r\n                    this.setState({\r\n                        count: this.props.time,\r\n                    })\r\n                    this.setState({\r\n                        width: 100,\r\n                    })\r\n                }\r\n            }, this.props.step*1000); \r\n        }\r\n    }\r\n\r\n\r\n    Start = () =>{\r\n        this.setState({\r\n            start: true,\r\n        });\r\n        this.props.onTimeStart()\r\n    }\r\n\r\n    DecrementTime = () =>{\r\n        this.setState({\r\n            \r\n            count: this.state.count - this.props.step\r\n        })\r\n    }\r\n\r\n    Pause = () =>{\r\n        this.setState({\r\n            start: false,\r\n        });\r\n        this.props.onTimePause()\r\n    }\r\n\r\n    changeWidth = () =>{\r\n        this.setState({\r\n            width: this.state.width - this.props.step*(100/this.props.time)\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>\r\n                    <div>{this.state.count} сек. </div>\r\n                </h2>\r\n                <div>\r\n                    <button onClick={this.Start}>Start</button>\r\n                    <button onClick={this.Pause}>Pause</button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"Width\" style={{ width: this.state.width + '%'}}>.</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Timer from './Component'\n\n\n\nclass App extends Component{\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <Timer \n        time={30} \n        step={1} \n        autostart={true}\n        onTick={(time) => console.log(\"Осталось времени: \" + time)} \n        onTimeEnd={() => console.log(\"Время вышло!\")}\n        onTimeStart={(timeLeft) => console.log(\"Таймер запущен!\")}\n        onTimePause={(timeLeft) => console.log(\"Таймер на паузе!\")}\n        />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}